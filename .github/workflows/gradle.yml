# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
      with: 
        submodules: 'recursive'
        token: ${{ secrets.ACTIONS_TOKEN }}
        
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

    - name: Build with Gradle Wrapper
      run: ./gradlew bootJar

    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
    #   with:
    #     gradle-version: '8.5'
    #
    # - name: Build with Gradle 8.5
    #   run: gradle build

    - name: Upload JAR file using SCP
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.EC2_PUBLIC_IP }}           # Remote server IP address
        username: ${{ secrets.USERNAME }}            # SSH username
        key: ${{ secrets.SSH_PRIVATE_KEY }}          # SSH private key (from secrets)
        port: ${{ secrets.EC2_SSH_PORT }}            # SSH port
        source: "./build/libs/PSYThinktank-0.0.1.jar" # Local file to upload
        target: "${{ secrets.BASE_DIR }}${{ secrets.DEPLOY_DIR }}" # Remote directory to upload to

    - name: Restart Java Container
      run: |
        ssh -o StrictHostKeyChecking=no -p ${{ secrets.EC2_SSH_PORT }} ${{ secrets.USERNAME }}@${{ secrets.EC2_PUBLIC_IP }} "sudo docker restart java"
